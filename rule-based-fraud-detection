# Predefined global threshold for high-value transactions
THRESHOLD_AMOUNT = 1000

# Sample transaction data
transactions = [
    {"transaction_id": 1, "user_id": 101, "amount": 500},
    {"transaction_id": 2, "user_id": 102, "amount": 1500},
    {"transaction_id": 3, "user_id": 103, "amount": 200},
    {"transaction_id": 4, "user_id": 104, "amount": 2500},
    {"transaction_id": 5, "user_id": 105, "amount": 800},
]

# Detect high-value transactions
for transaction in transactions:
    if transaction["amount"] >= THRESHOLD_AMOUNT:  
        print(f"⚠ ALERT: High-value transaction detected! Transaction ID: {transaction['transaction_id']}, Amount: ${transaction['amount']}")
    else:
        print(f"Transaction ID: {transaction['transaction_id']} is normal. Amount: ${transaction['amount']}")import time
from collections import defaultdict

# 1. Sample transaction stream
transactions = [
    {"user_id": 101, "transaction_id": 1, "amount": 200, "timestamp": time.time()},
    {"user_id": 101, "transaction_id": 2, "amount": 300, "timestamp": time.time() + 1},
    {"user_id": 102, "transaction_id": 3, "amount": 150, "timestamp": time.time() + 2},
    {"user_id": 101, "transaction_id": 4, "amount": 400, "timestamp": time.time() + 3},
    {"user_id": 101, "transaction_id": 5, "amount": 100, "timestamp": time.time() + 4},
]

# 2. Define a function to monitor transaction frequency
def monitor_transaction_frequency(transactions, time_window=5, max_transactions=3):
    # Dictionary to store transaction timestamps for each user
    user_transactions = defaultdict(list)
    
    print("Monitoring transaction frequency...\n")
    for transaction in transactions:
        user_id = transaction["user_id"]
        current_time = transaction["timestamp"]
        
        # Add the current transaction timestamp to the user's history
        user_transactions[user_id].append(current_time)
        
        # Remove transactions outside the time window
        user_transactions[user_id] = [
            t for t in user_transactions[user_id] if current_time - t <= time_window
        ]
        
        # Check if the user exceeded the maximum allowed transactions
        if len(user_transactions[user_id]) > max_transactions:
            print(f"⚠️ ALERT: User {user_id} exceeded {max_transactions} transactions in {time_window} seconds!")
        else:
            print(f"User {user_id}: Transaction recorded. Total in window: {len(user_transactions[user_id])}")
        
        # Simulate real-time processing delay
        time.sleep(1)

# 3. Run the transaction frequency monitoring system
monitor_transaction_frequency(transactions)

